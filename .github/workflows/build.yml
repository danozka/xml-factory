name: Build and Package Application

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4.9.1
        with:
          python-version: ${{ vars.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest --cov

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            architecture: amd64
            artifact_name: xml-factory-windows-amd64
            asset_name: xml-factory.exe
            pyinstaller_args: --onefile --name xml-factory
            python-version: ${{ vars.PYTHON_VERSION }}

          - os: ubuntu-latest
            platform: linux
            architecture: amd64
            artifact_name: xml-factory-linux-amd64
            asset_name: xml-factory
            pyinstaller_args: --onefile --name xml-factory
            python-version: ${{ vars.PYTHON_VERSION }}

          - os: macos-latest
            platform: macos
            architecture: amd64
            artifact_name: xml-factory-macos-amd64
            asset_name: xml-factory
            pyinstaller_args: --onefile --name xml-factory
            python-version: ${{ vars.PYTHON_VERSION }}

          - os: macos-latest
            platform: macos
            architecture: arm64
            artifact_name: xml-factory-macos-arm64
            asset_name: xml-factory
            pyinstaller_args: --onefile --name xml-factory --target-architecture arm64
            python-version: ${{ vars.PYTHON_VERSION }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.9.1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture == 'amd64' && 'x64' || matrix.architecture }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build with PyInstaller
      run: |
        pyinstaller ${{ matrix.pyinstaller_args }} src/main.py
    
    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.asset_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: Display structure of downloaded files
        run: ls -R dist/
      
      - name: Prepare release assets
        run: |
          mkdir -p release/windows-amd64
          mkdir -p release/linux-amd64
          mkdir -p release/macos-amd64
          mkdir -p release/macos-arm64
          
          cp dist/xml-factory-windows-amd64/xml-factory.exe release/windows-amd64/xml-factory.exe
          cp dist/xml-factory-linux-amd64/xml-factory release/linux-amd64/xml-factory
          cp dist/xml-factory-macos-amd64/xml-factory release/macos-amd64/xml-factory
          cp dist/xml-factory-macos-arm64/xml-factory release/macos-arm64/xml-factory
          
          cd release
          zip -r xml-factory-windows-amd64.zip windows-amd64
          tar -czf xml-factory-linux-amd64.tar.gz linux-amd64
          zip -r xml-factory-macos-amd64.zip macos-amd64
          tar -czf xml-factory-macos-amd64.tar.gz macos-amd64
          zip -r xml-factory-macos-arm64.zip macos-arm64
          tar -czf xml-factory-macos-arm64.tar.gz macos-arm64
          cd ..

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.date.outputs.date }}
          tag_name: release-${{ steps.date.outputs.date }}-${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            release/xml-factory-windows-amd64.zip
            release/xml-factory-linux-amd64.tar.gz
            release/xml-factory-macos-amd64.zip
            release/xml-factory-macos-amd64.tar.gz
            release/xml-factory-macos-arm64.zip
            release/xml-factory-macos-arm64.tar.gz
          generate_release_notes: true
